n_cats = 4

dir_alpha ~ dnExponential(1)
moves[mvi++] = mvScale(dir_alpha, lambda=1,    weight=1.0 )
moves[mvi++] = mvScale(dir_alpha, lambda=0.1,  weight=1.0 )
moves[mvi++] = mvScale(dir_alpha, lambda=0.01, weight=1.0 )

pi_prior := v(dir_alpha,dir_alpha,dir_alpha,dir_alpha,dir_alpha,dir_alpha,dir_alpha,dir_alpha) #rep(dir_alpha, 7)

# stationary freqs
for(i in 1:n_cats)
{
    pi ~ dnDirichlet(pi_prior)
    moves[mvi++] = mvSimplexElementScale(pi, alpha=10, weight=1.0)
    Q_morpho[i] := fnF81(pi)
}
matrix_probs ~ dnDirichlet(v(1,1,1,1))
moves[mvi++] = mvSimplexElementScale(matrix_probs, alpha=10, weight=1.0)


# We also use a discretized gamma distribution of rate categories #
# again, the shape parameter is drawn from an exponential prior #
alpha_morpho ~ dnExponential( 1.0 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

moves[mvi++] = mvScale(alpha_morpho, lambda=0.01, weight=1.0)
moves[mvi++] = mvScale(alpha_morpho, lambda=0.1,  weight=1.0)
moves[mvi++] = mvScale(alpha_morpho, lambda=1,    weight=1.0)

# We assume a strict morphological clock rate, drawn from an exponential prior #
clock_morpho ~ dnExponential(1.0)

moves[mvi++] = mvScale(clock_morpho, lambda=0.01, weight=4.0)
moves[mvi++] = mvScale(clock_morpho, lambda=0.1,  weight=4.0)
moves[mvi++] = mvScale(clock_morpho, lambda=1,    weight=4.0)

### Create the substitution model and clamp with our observed Standard data ###
# Here we use the option siteMatrices=true specify that the vector Q #
# represents a site-specific mixture of rate matrices #
# We also condition on observing only variable characters using coding="variable" #
phyMorpho ~ dnPhyloCTMC(tree=fbd_tree, siteRates=rates_morpho, branchRates=clock_morpho, Q=Q_morpho, 
type="Standard", siteMatrices=matrix_probs)
phyMorpho.clamp(morpho)


