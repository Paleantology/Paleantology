##########################################################################################
# Joint Fossilized Birth-Death Process prior on the topology and fossil occurrence times #
##########################################################################################


# Define a exponential priors on the birth rate and death rate #
speciation_rate1 ~  dnExponential(10)
extinction_rate1 ~  dnExponential(10)
speciation_rate2 ~  dnExponential(10)
extinction_rate2 ~  dnExponential(10)
speciation_rate3 ~  dnExponential(10)
extinction_rate3 ~  dnExponential(10)

# Specify a scale move on the speciation_rate parameter #
# This move will be applied with 3 different tuning values (lambda) to help improve mixing # 
moves[mvi++] = mvScale(speciation_rate1, lambda=0.01, weight=1)
moves[mvi++] = mvScale(speciation_rate1, lambda=0.1,  weight=1)
moves[mvi++] = mvScale(speciation_rate1, lambda=1.0,  weight=1)
moves[mvi++] = mvScale(speciation_rate2, lambda=0.01, weight=1)
moves[mvi++] = mvScale(speciation_rate2, lambda=0.1,  weight=1)
moves[mvi++] = mvScale(speciation_rate2, lambda=1.0,  weight=1)
moves[mvi++] = mvScale(speciation_rate3, lambda=0.01, weight=1)
moves[mvi++] = mvScale(speciation_rate3, lambda=0.1,  weight=1)
moves[mvi++] = mvScale(speciation_rate3, lambda=1.0,  weight=1)

# Specify a sliding-window move on the extinction_rate parameter #
# This move will be applied with 3 different window widths (delta) to help improve mixing # 
moves[mvi++] = mvScale(extinction_rate1, lambda=0.01, weight=1)
moves[mvi++] = mvScale(extinction_rate1, lambda=0.1,  weight=1)
moves[mvi++] = mvScale(extinction_rate1, lambda=1, weight=1)
moves[mvi++] = mvScale(extinction_rate2, lambda=0.01, weight=1)
moves[mvi++] = mvScale(extinction_rate2, lambda=0.1,  weight=1)
moves[mvi++] = mvScale(extinction_rate2, lambda=1, weight=1)
moves[mvi++] = mvScale(extinction_rate3, lambda=0.01, weight=1)
moves[mvi++] = mvScale(extinction_rate3, lambda=0.1,  weight=1)
moves[mvi++] = mvScale(extinction_rate3, lambda=1, weight=1)

# Create deterministic nodes for the diversification and turnover rates so that they can be monitored #
diversification1 := speciation_rate1 - extinction_rate1
turnover1 := extinction_rate1/speciation_rate1
diversification2 := speciation_rate2 - extinction_rate2
turnover2 := extinction_rate2/speciation_rate2
diversification3 := speciation_rate3 - extinction_rate3
turnover3 := extinction_rate3/speciation_rate3


# Fix the probability of sampling parameter (rho) to 1, #
# because all extant bears are represented in this analysis #
rho <- .1

# Assume an exponential prior on the rate of sampling fossils (psi) #
psi1 ~ dnExponential(10) 
psi2 ~ dnExponential(10) 
psi3 ~ dnExponential(10) 

# Specify a scale move on the psi parameter #
# This move will be applied with 3 different tuning values (lambda) to help improve mixing # 
moves[mvi++] = mvScale(psi1, lambda=0.01, weight=1)
moves[mvi++] = mvScale(psi1, lambda=0.1,  weight=1)
moves[mvi++] = mvScale(psi1, lambda=1, weight=1)
moves[mvi++] = mvScale(psi2, lambda=0.01, weight=1)
moves[mvi++] = mvScale(psi2, lambda=0.1,  weight=1)
moves[mvi++] = mvScale(psi2, lambda=1, weight=1)
moves[mvi++] = mvScale(psi3, lambda=0.01, weight=1)
moves[mvi++] = mvScale(psi3, lambda=0.1,  weight=1)
moves[mvi++] = mvScale(psi3, lambda=1, weight=1)

# The FBD is conditioned on a starting time for the process, which is the origin time #
# Specify a uniform prior on the origin #
origin_time ~ dnUnif(100, 180)

# Specify a sliding-window move on the origin_time parameter #
# This move will be applied with 3 different window widths (delta) to help improve mixing # 
moves[mvi++] = mvSlide(origin_time, delta=0.01, weight=5.0)
moves[mvi++] = mvSlide(origin_time, delta=0.1,  weight=5.0)
moves[mvi++] = mvSlide(origin_time, delta=1, weight=5.0)


### Define the tree-prior distribution as the fossilized birth-death process ###
fbd_dist = dnFBDP(origin=origin_time, lambda=[speciation_rate1, speciation_rate2, speciation_rate3],
 mu=[extinction_rate1, extinction_rate2, extinction_rate3], psi=[psi1, psi2, psi3], rho=rho, 
taxa=taxa, samplingStrategy="diversified", timeline=[101,97])

crown = clade("Martialis_heureka", "Leptanilla_swani", "Anomalomyrma_sp", "Apomyrma_stygia",
"Opamyrma_hungvuong", "Amblyopone_pallipes", "Proceratium_stictum", "Paraponera_clavata",
"Platythyrea_punctata","Pogonomyrmex_californicus", "Tatuidris_tatusia", "Leptogenys_diminuta",
"Hypoponera_opacior", "Tetraponera_punctulata", "Leptanilloides_nomada","Nothomyrmecia_macrops",
"Aneuretus_simoni","Lasius_californicus", "Formica_fusca", "Myrmica_americana" )

# The will be a random variable of a constrained topology distribution that is governed by the FBD #
# this distribution will generate FBD trees that match the monophyly constraints defined above #

constraints = v(crown)
fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints)
# Specify mclade(taxon))
#intervals = readDataDelimitedFile(file="ants_fossil_intervals.tsv", header=true)

#for(i in 1:intervals.size())
#{
# taxon  = intervals[i][1]
# a_i = intervals[i][2]
# b_i = intervals[i][3]
 
# t[i] := tmrca(fbd_tree, clade(taxon))
# 
# fossil[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
# fossil[i].clamp( 0 )
#}
# Add a move to sample the fossil times #
moves[mvi++] = mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=5.0)
moves[mvi++] = mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=5.0) 

### Create deterministic nodes to monitor various tree statistics ###
# Monitor the number of sampled ancestors in the FBD-tree #
num_samp_anc := fbd_tree.numSampledAncestors();

#age_extant := tmrca(fbd_tree, small)
