################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a general time reversible model
#                   with gamma distributed rate variation among sites
# 
# This file: Runs the full MCMC on a single gene under the general time reversible 
#            substitution model using an unconstrained non-clock tree.
#
# authors: Sebastian Hoehna, Michael Landis, Tracy A. Heath and Brian R. Moore
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

filenames <- v("fasttree_improve_aln/18s.aln.nex", "fasttree_improve_aln/28s.aln.nex", "fasttree_improve_aln/ABD.aln.nex","fasttree_improve_aln/Arg.aln.nex", "fasttree_improve_aln/CAD.aln.nex", "fasttree_improve_aln/EF1.aln.nex", "fasttree_improve_aln/EF2.aln.nex", "fasttree_improve_aln/lg.aln.nex", "fasttree_improve_aln/WG.aln.nex")

n_data_subsets <- filenames.size()
for (i in 1:n_data_subsets) {
    data[i] = readDiscreteCharacterData(filenames[i])
}
tau <- readBranchLengthTrees("Blanchard_raw_data/666TipTree.txt")[1]


# Get some useful variables from the data. We need these later on.
n_species <- data[1].ntaxa()
taxa <- data[1].taxa()
n_branches <- 2 * n_species - 2

# set my move index
mi = 0


######################
# Substitution Model #
######################

for (i in 1:n_data_subsets) {

    # exchangeability rates for partition i
    er_prior[i] <- v(1,1,1,1,1,1)
    er[i] ~ dnDirichlet(er_prior[i])
    moves[++mi] = mvSimplexElementScale(er[i], alpha=10, tune=true, weight=3) 

    # stationary frequencies for partition i
    pi_prior[i] <- v(1,1,1,1)
    pi[i] ~ dnDirichlet(pi_prior[i])
    moves[++mi] = mvSimplexElementScale(pi[i], alpha=10, tune=true, weight=2) 

    # rate matrix for partition i
    Q[i] := fnGTR(er[i],pi[i]) 
  
    # +Gamma for partition i
    alpha_prior_mean[i] <- 5.0
    alpha_prior_sd[i] <- 0.587405
    alpha[i] ~ dnLognormal( alpha_prior_mean[i], alpha_prior_sd[i] )
    gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )

    # add moves for the alpha parameter
    moves[++mi] = mvScale(alpha[i],weight=2)

    # the probability of a site being invariable
    pinvar[i] ~ dnBeta(1,1)
    moves[++mi] = mvScale(pinvar[i], lambda=0.1, tune=true, weight=2.0)
    moves[++mi] = mvSlide(pinvar[i], delta=0.1, tune=true, weight=2.0)

}

##############
# Tree model #
##############

# construct a variable for the tree drawn from a birth death process
topology ~ dnUniformTopology(taxa=taxa)
topology.setValue(tau)

# add topology Metropolis-Hastings moves
moves[++mi] = mvNNI(topology, weight=1.0)
moves[++mi] = mvSPR(topology, weight=1.0)

# create branch length vector and add moves
for (i in 1:n_branches) {
   br_lens[i] ~ dnExponential(10.0)
   moves[++mi] = mvScale(br_lens[i])
}

# add deterministic node to monitor tree length
TL := sum(br_lens)

# unite topology and branch length vector into phylogeny object
phylogeny := treeAssembly(topology, br_lens)



###################
# PhyloCTMC Model #
###################

# the sequence evolution model
for (i in 1:n_data_subsets) {
    phyloSeq[i] ~ dnPhyloCTMC(tree=topology, Q=Q[i], siteRates=gamma_rates[i], pInv=pinvar[i], type="DNA")
    phyloSeq[i].clamp(data[i])
}

#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(Q)


monitors[1] = mnModel(filename="improved_rb_output/ant_GTR_Gamma_nonclock.log",printgen=10, separator = TAB)
monitors[2] = mnFile(filename="improved_rb_output/ant_GTR_Gamma_nonclock.trees",printgen=10, separator = TAB, phylogeny)
monitors[3] = mnScreen(printgen=1000, TL)

mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=10000,tuningInterval=1000)
mymcmc.run(generations=300000)


# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace = readTreeTrace("improved_rb_output/ant_GTR_Gamma_nonclock.trees", treetype="non-clock")
# and get the summary of the tree trace
#treetrace.summarize()

map_tree = mapTree(treetrace,"improved_rb_output/GTR_Gamma_nonclock.tree")

# you may want to quit RevBayes now
q()

